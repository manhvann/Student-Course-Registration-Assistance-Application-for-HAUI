/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.admin;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.FakeData;
import model.HocPhan;
import model.Khoa;

/**
 *
 * @author DELL
 */
public class QuanLyDSLopHocPhan extends javax.swing.JDialog {

    private String maNganh;
    private String maKhoa;
    private List<HocPhan> listHP = FakeData.layHocPhan_Test();
    DefaultTableModel tableModel;
    private HocPhan hocPhan;
    private String pathHocPhan = "src\\data\\HocPhan.txt";

    public QuanLyDSLopHocPhan(java.awt.Dialog parent, boolean modal, String maNganh, String maKhoa) {
        super(parent, modal);
        this.maNganh = maNganh;
        this.maKhoa = maKhoa;
        initComponents();
        this.setTitle("Danh sách lớp học phần");
        tblHP.setDefaultEditor(Object.class, null);
        viewTable();
        HienThi();
    }
    
    public void viewTable() {
        DefaultTableModel model = (DefaultTableModel) this.tblHP.getModel();
        model.setRowCount(0);
        for (HocPhan hp : dsHocPhanTheoNganh()) {
            model.addRow(new Object[]{
                hp.getMaHP(),
                hp.getTenHP(),
                hp.getSoTC()});
        }
    }

    public List<HocPhan> dsHocPhanTheoNganh() {
        List<HocPhan> hps = new ArrayList<>();
        for (HocPhan hp : listHP) {
            if (hp.getMaNganh().equals(maNganh)) {
                hps.add(hp);
            }
        }
        return hps;
    }

    private void HienThi() {
        tblHP.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (tblHP.getSelectedRow() >= 0) {
                    txtMaHP.setText(tblHP.getValueAt(tblHP.getSelectedRow(), 0) + "");
                    txtTenHP.setText(tblHP.getValueAt(tblHP.getSelectedRow(), 1) + "");
                    txtSoTC.setText(tblHP.getValueAt(tblHP.getSelectedRow(), 2) + "");
                }
            }
        });
    }

    private void saveFileHocPhan() {
        //Cập nhật danh sách vào file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(pathHocPhan))) {
            // Ghi dữ liệu vào file
            for (HocPhan hp : listHP) {
                writer.write(hp.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean ktraMaTonTai(String maHP) {
        for (HocPhan hp : listHP) {
            if (hp.getMaHP().equals(maHP)) {
                return true;
            }
        }
        return false;
    }
    
    public HocPhan getHocPhan(){
        return this.hocPhan;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHP = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtSoTC = new javax.swing.JTextField();
        txtMaHP = new javax.swing.JTextField();
        txtTenHP = new javax.swing.JTextField();
        btThem = new javax.swing.JButton();
        btSua = new javax.swing.JButton();
        btXoa = new javax.swing.JButton();
        btExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Mã học phần");

        jLabel2.setText("Tên học phần");

        tblHP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tblHP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Mã học phần", "Tên học phần", "Số tín chỉ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHP);

        jLabel5.setText("Số tín chỉ");

        btThem.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btThem.setText("Thêm ");
        btThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThemActionPerformed(evt);
            }
        });

        btSua.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btSua.setText("Sửa");
        btSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuaActionPerformed(evt);
            }
        });

        btXoa.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btXoa.setText("Xoá");
        btXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXoaActionPerformed(evt);
            }
        });

        btExit.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btExit.setText("Quay lại");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTenHP)
                                    .addComponent(txtSoTC)
                                    .addComponent(txtMaHP, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(txtMaHP, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTenHP, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSoTC, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btThem)
                        .addGap(26, 26, 26)
                        .addComponent(btSua)
                        .addGap(29, 29, 29)
                        .addComponent(btXoa)
                        .addGap(29, 29, 29)
                        .addComponent(btExit)
                        .addContainerGap(55, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXoaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.tblHP.getModel();

        int selectedRow = tblHP.getSelectedRow(); // Lấy dòng được chọn
        // Kiểm tra xem có dòng nào được chọn không
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            // Lấy dữ liệu từ dòng được chọn
            String maHP = model.getValueAt(selectedRow, 0).toString();
            String tenHP = model.getValueAt(selectedRow, 1).toString();
            if (JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn xoá", "Xác nhận", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                // Xóa dòng dữ liệu từ bảng
                model.removeRow(selectedRow);

                // Xóa dòng dữ liệu từ danh sách
                for (HocPhan hp : listHP) {
                    if (hp.getMaHP().equals(maHP) && hp.getTenHP().equals(tenHP)) {
                        listHP.remove(hp);
                        break;
                    }
                }
            }
            viewTable();
        }
    }//GEN-LAST:event_btXoaActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed

        dispose();
    }//GEN-LAST:event_btExitActionPerformed

    private void btSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHP.getSelectedRow(); // Lấy dòng được chọn

        if (selectedRow == -1) { // Kiểm tra xem có dòng nào được chọn không
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            String ma = txtMaHP.getText();
            String ten = txtTenHP.getText();
            int soTC;
            try {
                soTC = Integer.parseInt(txtSoTC.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Số tín chỉ phải là số nguyên!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }

            tblHP.setValueAt(ma, selectedRow, 0);
            tblHP.setValueAt(ten, selectedRow, 1);
            tblHP.setValueAt(soTC, selectedRow, 2);
            saveFileHocPhan();
            txtMaHP.setText("");
            txtTenHP.setText("");
            txtSoTC.setText("");
        }
    }//GEN-LAST:event_btSuaActionPerformed

    private void btThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThemActionPerformed
        // TODO add your handling code here:

        String ma = txtMaHP.getText();
        String ten = txtTenHP.getText();
        int soTC;

        try {
            soTC = Integer.parseInt(txtSoTC.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Số tín chỉ phải là số nguyên!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (ma.isEmpty() || ten.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (ktraMaTonTai(ma)) {
            JOptionPane.showMessageDialog(null, "Mã ngành đã tồn tài trong CSDL!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object[] kMoi = {ma, ten, soTC};
        DefaultTableModel model = (DefaultTableModel) tblHP.getModel();
        model.addRow(kMoi);
        tblHP.updateUI();
        JOptionPane.showMessageDialog(rootPane, "Thêm thành!");
        this.hocPhan = new HocPhan(maKhoa, maNganh, ma, ten, soTC);
        listHP.add(hocPhan);
        saveFileHocPhan();
        viewTable();
        //Làm trắng các textbox
        txtMaHP.setText("");
        txtTenHP.setText("");
        txtSoTC.setText("");
    }//GEN-LAST:event_btThemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyDSLopHocPhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyDSLopHocPhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyDSLopHocPhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyDSLopHocPhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                test3 dialog = new test3(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExit;
    private javax.swing.JButton btSua;
    private javax.swing.JButton btThem;
    private javax.swing.JButton btXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHP;
    private javax.swing.JTextField txtMaHP;
    private javax.swing.JTextField txtSoTC;
    private javax.swing.JTextField txtTenHP;
    // End of variables declaration//GEN-END:variables
}
